# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aquapi # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodb:
    start:
      port: 7500
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: users
            sources: [./migrations/users.json]
  serverless-offline:
    stage: dev

provider:
  name: aws
  runtime: nodejs8.10

  # you can overwrite defaults here
  stage: dev
  region: ap-northeast-1
  profile: yamamoto

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/aquapi-*"
      Action:
        - "dynamodb:*"
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  userList:
    handler: handler.handleUserList
    events:
      - http:
          path: users
          method: get
          request:
            parameters:
              querystrings:
                limit: true
                startId: true
          cors: true
  user:
    handler: handler.handleUser
    DependsOn:
      - UserPool
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: "arn:aws:cognito-idp:ap-northeast-1:861968124599:userpool/ap-northeast-1_FMwQqHODC"
  userRegist:
    handler: handler.handleUserRegist
    events:
      - http:
          path: users
          method: post
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          UnusedAccountValidityDays: 7
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: "Your verification code is {####}."
        EmailVerificationSubject: "Your verification code"
        MfaConfiguration: "OFF"
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: false
        UserPoolName:
          Ref: AWS::StackName
        Schema:
          - AttributeDataType: "String"
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: "email"
            StringAttributeConstraints:
              MaxLength: "2048"
              MinLength: "0"
            Required: true
          - AttributeDataType: "String"
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: "name"
            StringAttributeConstraints:
              MaxLength: "2048"
              MinLength: "0"
            Required: false
          - AttributeDataType: "String"
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: "custom-attributes"
            StringAttributeConstraints:
              MaxLength: "2048"
              MinLength: "0"
            Required: false
        SmsAuthenticationMessage: "Your authentication code is {####}."
        SmsVerificationMessage: "Your verification code is {####}."
        UserPoolTags:
          Name: "AQUAPI"
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName:
          Ref: AWS::StackName
        GenerateSecret: false
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
        ReadAttributes:
          - "email"
          - "name"
          - "custom:custom-attributes"
        RefreshTokenValidity: 30
        UserPoolId:
          Ref: UserPool
        WriteAttributes:
          - "email"
          - "name"
          - "custom:custom-attributes"
    users:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: "aquapi-users"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    tanks:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: "aquapi-tanks"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    fishes:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: "aquapi-fishes"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
Outputs:
  UserPoolClientId:
    Description: "The name of the user pool client"
    Value:
      Ref: UserPoolClient
  UserPoolId:
    Description: "The name of the user pool"
    Value:
      Ref: UserPool
